use winit::{window::CursorIcon, event::{VirtualKeyCode, MouseButton}};
use easy_imgui_sys::*;
use easy_imgui as imgui;

pub fn to_imgui_button(btncode: MouseButton) -> Option<imgui::MouseButton> {
    let btn = match btncode {
        MouseButton::Left => imgui::MouseButton::Left,
        MouseButton::Right => imgui::MouseButton::Right,
        MouseButton::Middle => imgui::MouseButton::Middle,
        MouseButton::Other(x) if x < ImGuiMouseButton_::ImGuiMouseButton_COUNT.0 as u16 => imgui::MouseButton::Other(x),
        _ => return None,
    };
    Some(btn)
}
pub fn to_imgui_key(keycode: VirtualKeyCode) -> Option<imgui::Key> {
    let key = match keycode {
        VirtualKeyCode::Tab => imgui::Key::Tab,
        VirtualKeyCode::Left => imgui::Key::LeftArrow,
        VirtualKeyCode::Right => imgui::Key::RightArrow,
        VirtualKeyCode::Up => imgui::Key::UpArrow,
        VirtualKeyCode::Down => imgui::Key::DownArrow,
        VirtualKeyCode::PageUp => imgui::Key::PageUp,
        VirtualKeyCode::PageDown => imgui::Key::PageDown,
        VirtualKeyCode::Home => imgui::Key::Home,
        VirtualKeyCode::End => imgui::Key::End,
        VirtualKeyCode::Insert => imgui::Key::Insert,
        VirtualKeyCode::Delete => imgui::Key::Delete,
        VirtualKeyCode::Back => imgui::Key::Backspace,
        VirtualKeyCode::Space => imgui::Key::Space,
        VirtualKeyCode::Return => imgui::Key::Enter,
        VirtualKeyCode::Escape => imgui::Key::Escape,
        VirtualKeyCode::LControl => imgui::Key::LeftCtrl,
        VirtualKeyCode::LShift => imgui::Key::LeftShift,
        VirtualKeyCode::LAlt => imgui::Key::LeftAlt,
        VirtualKeyCode::LWin => imgui::Key::LeftSuper,
        VirtualKeyCode::RControl => imgui::Key::RightCtrl,
        VirtualKeyCode::RShift => imgui::Key::RightShift,
        VirtualKeyCode::RAlt => imgui::Key::RightAlt,
        VirtualKeyCode::RWin => imgui::Key::RightSuper,
        VirtualKeyCode::Key0 => imgui::Key::Num0,
        VirtualKeyCode::Key1 => imgui::Key::Num1,
        VirtualKeyCode::Key2 => imgui::Key::Num2,
        VirtualKeyCode::Key3 => imgui::Key::Num3,
        VirtualKeyCode::Key4 => imgui::Key::Num4,
        VirtualKeyCode::Key5 => imgui::Key::Num5,
        VirtualKeyCode::Key6 => imgui::Key::Num6,
        VirtualKeyCode::Key7 => imgui::Key::Num7,
        VirtualKeyCode::Key8 => imgui::Key::Num8,
        VirtualKeyCode::Key9 => imgui::Key::Num9,
        VirtualKeyCode::A => imgui::Key::A,
        VirtualKeyCode::B => imgui::Key::B,
        VirtualKeyCode::C => imgui::Key::C,
        VirtualKeyCode::D => imgui::Key::D,
        VirtualKeyCode::E => imgui::Key::E,
        VirtualKeyCode::F => imgui::Key::F,
        VirtualKeyCode::G => imgui::Key::G,
        VirtualKeyCode::H => imgui::Key::H,
        VirtualKeyCode::I => imgui::Key::I,
        VirtualKeyCode::J => imgui::Key::J,
        VirtualKeyCode::K => imgui::Key::K,
        VirtualKeyCode::L => imgui::Key::L,
        VirtualKeyCode::M => imgui::Key::M,
        VirtualKeyCode::N => imgui::Key::N,
        VirtualKeyCode::O => imgui::Key::O,
        VirtualKeyCode::P => imgui::Key::P,
        VirtualKeyCode::Q => imgui::Key::Q,
        VirtualKeyCode::R => imgui::Key::R,
        VirtualKeyCode::S => imgui::Key::S,
        VirtualKeyCode::T => imgui::Key::T,
        VirtualKeyCode::U => imgui::Key::U,
        VirtualKeyCode::V => imgui::Key::V,
        VirtualKeyCode::W => imgui::Key::W,
        VirtualKeyCode::X => imgui::Key::X,
        VirtualKeyCode::Y => imgui::Key::Y,
        VirtualKeyCode::Z => imgui::Key::Z,
        VirtualKeyCode::F1 => imgui::Key::F1,
        VirtualKeyCode::F2 => imgui::Key::F2,
        VirtualKeyCode::F3 => imgui::Key::F3,
        VirtualKeyCode::F4 => imgui::Key::F4,
        VirtualKeyCode::F5 => imgui::Key::F5,
        VirtualKeyCode::F6 => imgui::Key::F6,
        VirtualKeyCode::F7 => imgui::Key::F7,
        VirtualKeyCode::F8 => imgui::Key::F8,
        VirtualKeyCode::F9 => imgui::Key::F9,
        VirtualKeyCode::F10 => imgui::Key::F10,
        VirtualKeyCode::F11 => imgui::Key::F11,
        VirtualKeyCode::F12 => imgui::Key::F12,
        VirtualKeyCode::Apostrophe => imgui::Key::Apostrophe,
        VirtualKeyCode::Comma => imgui::Key::Comma,
        VirtualKeyCode::Minus => imgui::Key::Minus,
        VirtualKeyCode::Period => imgui::Key::Period,
        VirtualKeyCode::Slash => imgui::Key::Slash,
        VirtualKeyCode::Semicolon => imgui::Key::Semicolon,
        VirtualKeyCode::Equals => imgui::Key::Equal,
        VirtualKeyCode::LBracket => imgui::Key::LeftBracket,
        VirtualKeyCode::Backslash => imgui::Key::Backslash,
        VirtualKeyCode::RBracket => imgui::Key::RightBracket,
        VirtualKeyCode::Grave => imgui::Key::GraveAccent,
        VirtualKeyCode::Capital => imgui::Key::CapsLock,
        VirtualKeyCode::Scroll => imgui::Key::ScrollLock,
        VirtualKeyCode::Numlock => imgui::Key::NumLock,
        VirtualKeyCode::Snapshot => imgui::Key::PrintScreen,
        VirtualKeyCode::Pause => imgui::Key::Pause,
        VirtualKeyCode::Numpad0 => imgui::Key::Keypad0,
        VirtualKeyCode::Numpad1 => imgui::Key::Keypad1,
        VirtualKeyCode::Numpad2 => imgui::Key::Keypad2,
        VirtualKeyCode::Numpad3 => imgui::Key::Keypad3,
        VirtualKeyCode::Numpad4 => imgui::Key::Keypad4,
        VirtualKeyCode::Numpad5 => imgui::Key::Keypad5,
        VirtualKeyCode::Numpad6 => imgui::Key::Keypad6,
        VirtualKeyCode::Numpad7 => imgui::Key::Keypad7,
        VirtualKeyCode::Numpad8 => imgui::Key::Keypad8,
        VirtualKeyCode::Numpad9 => imgui::Key::Keypad9,
        VirtualKeyCode::NumpadDecimal => imgui::Key::KeypadDecimal,
        VirtualKeyCode::NumpadDivide => imgui::Key::KeypadDivide,
        VirtualKeyCode::NumpadMultiply => imgui::Key::KeypadMultiply,
        VirtualKeyCode::NumpadSubtract => imgui::Key::KeypadSubtract,
        VirtualKeyCode::NumpadAdd => imgui::Key::KeypadAdd,
        VirtualKeyCode::NumpadEnter => imgui::Key::KeypadEnter,
        VirtualKeyCode::NumpadEquals => imgui::Key::KeypadEqual,
        _ => return None,
    };
    Some(key)
}

pub fn from_imgui_cursor(cursor: imgui::MouseCursor) -> Option<CursorIcon> {
    use CursorIcon::*;
    let c = match cursor {
        imgui::MouseCursor::Arrow => Arrow,
        imgui::MouseCursor::TextInput => Text,
        imgui::MouseCursor::ResizeAll => Move,
        imgui::MouseCursor::ResizeNS => NsResize,
        imgui::MouseCursor::ResizeEW => EwResize,
        imgui::MouseCursor::ResizeNESW => NeswResize,
        imgui::MouseCursor::ResizeNWSE => NwseResize,
        imgui::MouseCursor::Hand => Hand,
        imgui::MouseCursor::NotAllowed => NotAllowed,
        imgui::MouseCursor::None => return None,
    };
    Some(c)
}

